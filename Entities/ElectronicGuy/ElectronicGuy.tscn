[gd_scene load_steps=74 format=3 uid="uid://8iia55nvxym8"]

[ext_resource type="Texture2D" uid="uid://jnhrqbsna2l3" path="res://Entities/ElectronicGuy/Art/TvG_Idle.png" id="1_c2rm8"]
[ext_resource type="Texture2D" uid="uid://covd1ohlw8xpy" path="res://Entities/ElectronicGuy/Art/TvG_Teleport.png" id="2_0f2x0"]
[ext_resource type="AudioStream" uid="uid://dxyxe7mlwglu8" path="res://Entities/Gene/Audio/Glock_Shoot.wav" id="2_3i6hs"]
[ext_resource type="Script" uid="uid://dbh5t8vs4cyi2" path="res://Dev Stuff/BaseStates/Statemachine.gd" id="3_vcco8"]
[ext_resource type="Texture2D" uid="uid://do0tj02dopgje" path="res://Systems/Flashlight/Cone_Light.png" id="4_ydiuq"]

[sub_resource type="GDScript" id="GDScript_kvlcq"]
script/source = "extends Enemyclass

var tv = null
var channel_number: int = 0
var move_audio: int = 1
var can_teleport: bool = true
var teleporting: bool = false
var random_rotation: float

var words_added_per_state: Dictionary = {
	\"description\": false,
	\"wander\": false,
	\"prowl\": false,
	\"search\": false,
	\"breakin\": false,
	\"chase\": false,
	\"leave\": false,
	\"death\": false
}

func _ready():
	rotate_vc_timer.connect(\"timeout\", Callable(self, \"on_rotate_timer_timeout\"))
	check_vision_timer.connect(\"timeout\", Callable(self, \"on_check_vision_timer_timeout\"))

func _physics_process(_delta):
	if not tv.has_power:
		die()
	
	if health <= 0:
		die()
	else:
		handle_navigation()
		handle_animation()
		check_vision()
	
func die():
	velocity = Vector2.ZERO
	print(\"Enemy has died.\")

func handle_navigation():
	if not visible:
		var move_direction = to_local(navagent.get_next_path_position()).normalized()
		velocity = move_direction * movement_speed
		move_and_slide()
		rotate_vision_cone(move_direction.angle(), Vector2(0,0))
	else:
		velocity = Vector2.ZERO

		if vision_cone.rotation != random_rotation:
			rotate_vision_cone(random_rotation, Vector2(0,0))
			if rotate_vc_timer.is_stopped():
				rotate_vc_timer.start()

func handle_animation():
	if not base_bools.can_play_move_animation:
		return
		
	if base_bools.is_pursuing and player:
		anim_sprite.flip_h = (player.position.x - position.x) < 0 if anim_sprite else false
	
	if not teleporting:
		var idle_picked: bool = false
		if not idle_picked:
			idle_picked = false
			var idle_num = randi_range(1,3)
			match idle_num:
				1:
					anim_tree.get(\"parameters/playback\").travel(\"Idle1\")
				2:
					anim_tree.get(\"parameters/playback\").travel(\"Idle2\")
				3:
					anim_tree.get(\"parameters/playback\").travel(\"Idle3\")
			await anim_sprite.animation_finished
			idle_picked = false
			can_teleport = true

func take_damage(playerdamage: int):
	health -= playerdamage
	print(\"Enemy Health: \", health)

func rotate_vision_cone(direction_angle: float, vector: Vector2):
	if direction_angle == 0:
		vision_cone.look_at(vector)
	else:
		vision_cone.rotation = lerp(vision_cone.rotation, direction_angle, 0.01)
	
func check_vision():
	for raycasts in vision_cone.get_children():
		var collider = raycasts.get_collider()
		if raycasts.is_colliding() and collider.is_in_group(\"Player\"):
			base_bools.player_found = true
			rotate_vision_cone(0, player.global_position)
			set_target_position(player.global_position)
			check_vision_timer.set_paused(false)
			
			if check_vision_timer.is_stopped():
				check_vision_timer.start()
		else:
			check_vision_timer.set_paused(true)

func teleport():
	if can_teleport:
		print(\"TVG Teleporting\")
		teleporting = true
		can_teleport = false
		anim_tree.get(\"parameters/playback\").travel(\"Teleport\")
		set_can_see(false)
		set_can_attack(false)
		set_visibility(false)
		await anim_tree.animation_finished
		await get_tree().create_timer(3).timeout

		anim_tree.get(\"parameters/playback\").travel(\"Reappear\")
		await anim_tree.animation_finished
		
		set_can_see(true)
		set_can_attack(true)
		set_visibility(true)
		teleporting = false

func attack():
	print(\"TVG Attacking\")
	GameManager.start_quick_time_event(1)
	movement_speed = 0

func transition_states(state: String):
	match state:
		\"chase\":
			state_machine.on_child_transition(state_machine.current_state, \"chase\")
		\"search\":
			state_machine.on_child_transition(state_machine.current_state, \"search\")

func on_rotate_timer_timeout():
	random_rotation = randf_range(deg_to_rad(vision_cone.rotation - 60), deg_to_rad(vision_cone.rotation + 60))
	print(\"RandRot: \", random_rotation)

func on_check_vision_timer_timeout():
	transition_states(\"chase\")

func on_body_entered(_body):
	attack()
	set_can_attack(false)
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_ygt66"]
radius = 133.333
height = 800.0

[sub_resource type="AtlasTexture" id="AtlasTexture_pgx8s"]
atlas = ExtResource("1_c2rm8")
region = Rect2(0, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_iolvh"]
atlas = ExtResource("1_c2rm8")
region = Rect2(64, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_a80bg"]
atlas = ExtResource("1_c2rm8")
region = Rect2(128, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_icdsu"]
atlas = ExtResource("1_c2rm8")
region = Rect2(0, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_kr4nr"]
atlas = ExtResource("1_c2rm8")
region = Rect2(64, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_plkxg"]
atlas = ExtResource("1_c2rm8")
region = Rect2(128, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_4ojaw"]
atlas = ExtResource("1_c2rm8")
region = Rect2(192, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_67jb5"]
atlas = ExtResource("1_c2rm8")
region = Rect2(256, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_o3boi"]
atlas = ExtResource("1_c2rm8")
region = Rect2(0, 450, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_vmwai"]
atlas = ExtResource("1_c2rm8")
region = Rect2(0, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_1kem3"]
atlas = ExtResource("1_c2rm8")
region = Rect2(64, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_a5264"]
atlas = ExtResource("1_c2rm8")
region = Rect2(128, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_3d25m"]
atlas = ExtResource("1_c2rm8")
region = Rect2(192, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_57j0l"]
atlas = ExtResource("1_c2rm8")
region = Rect2(0, 150, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_fhmjv"]
atlas = ExtResource("1_c2rm8")
region = Rect2(192, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_ge44x"]
atlas = ExtResource("1_c2rm8")
region = Rect2(256, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_8gpna"]
atlas = ExtResource("1_c2rm8")
region = Rect2(256, 300, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_xiq3p"]
atlas = ExtResource("1_c2rm8")
region = Rect2(0, 450, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_shqp7"]
atlas = ExtResource("1_c2rm8")
region = Rect2(256, 150, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_ajbcm"]
atlas = ExtResource("1_c2rm8")
region = Rect2(256, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_abqdl"]
atlas = ExtResource("1_c2rm8")
region = Rect2(64, 150, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_eq20j"]
atlas = ExtResource("1_c2rm8")
region = Rect2(128, 150, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_lmnrn"]
atlas = ExtResource("1_c2rm8")
region = Rect2(192, 150, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_ncjdv"]
atlas = ExtResource("1_c2rm8")
region = Rect2(128, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_qvecp"]
atlas = ExtResource("1_c2rm8")
region = Rect2(0, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_yrs75"]
atlas = ExtResource("1_c2rm8")
region = Rect2(64, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_8g7e2"]
atlas = ExtResource("1_c2rm8")
region = Rect2(128, 150, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_vy0ch"]
atlas = ExtResource("1_c2rm8")
region = Rect2(256, 150, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_4eph5"]
atlas = ExtResource("1_c2rm8")
region = Rect2(0, 150, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_eaoea"]
atlas = ExtResource("2_0f2x0")
region = Rect2(0, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_0p78q"]
atlas = ExtResource("2_0f2x0")
region = Rect2(64, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_5dlij"]
atlas = ExtResource("2_0f2x0")
region = Rect2(128, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_b2qsx"]
atlas = ExtResource("2_0f2x0")
region = Rect2(192, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_l13yv"]
atlas = ExtResource("2_0f2x0")
region = Rect2(256, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_1py3w"]
atlas = ExtResource("2_0f2x0")
region = Rect2(320, 0, 64, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_ywl4v"]
atlas = ExtResource("2_0f2x0")
region = Rect2(384, 0, 64, 150)

[sub_resource type="SpriteFrames" id="SpriteFrames_rrhvi"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pgx8s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_iolvh")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a80bg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_icdsu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kr4nr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_plkxg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ojaw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_67jb5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_o3boi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vmwai")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1kem3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a5264")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3d25m")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_57j0l")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fhmjv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ge44x")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8gpna")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xiq3p")
}],
"loop": false,
"name": &"Idle1",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pgx8s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_iolvh")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a80bg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_shqp7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kr4nr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ajbcm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ojaw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_67jb5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_o3boi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vmwai")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1kem3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a5264")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3d25m")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_abqdl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_eq20j")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_lmnrn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8gpna")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xiq3p")
}],
"loop": false,
"name": &"Idle2",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pgx8s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_iolvh")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a80bg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ncjdv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qvecp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_yrs75")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ojaw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_67jb5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_o3boi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vmwai")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1kem3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a5264")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3d25m")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8g7e2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vy0ch")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4eph5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8gpna")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xiq3p")
}],
"loop": false,
"name": &"Idle3",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_eaoea")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0p78q")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5dlij")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_b2qsx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l13yv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1py3w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ywl4v")
}],
"loop": false,
"name": &"Teleport",
"speed": 16.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_gv56p"]
radius = 266.667
height = 1066.67

[sub_resource type="GDScript" id="GDScript_ajdjm"]
script/source = "extends Enemy_state_spawn

func enter():
	spawn_sound.pitch_scale = randf_range(1,1.5)
	spawn_sound.play()
	enemy.hide()
	enemy.set_movement_speed(0)
	enemy.set_can_attack(false)
	enemy.set_can_see(false)
	enemy.set_visibility(false)
	enemy.base_bools.can_play_move_animation = false
	
	await get_tree().create_timer(1).timeout
	
	transitioned.emit(self, \"prowl\")

func exit():
	pass
"

[sub_resource type="GDScript" id="GDScript_cm636"]
script/source = "extends Enemy_state_prowl
var word_added: bool = false

@export var switch_channel_cooldown: Timer
var ready_to_attack: bool = false

func enter():
	print(enemy, \": prowling\")
	var prowl_timer = get_tree().create_timer(10)
	prowl_timer.connect(\"timeout\", Callable(self, \"on_prowl_timer_timeout\"))
	switch_channel_cooldown.connect(\"timeout\", Callable(self, \"on_switch_channel_cooldown_timeout\"))
	switch_channel_cooldown.start()
	enemy.tv._on_button_turn_on_pressed()
	
func exit():
	switch_channel_cooldown.disconnect(\"timeout\", Callable(self, \"on_switch_channel_cooldown_timeout\"))
	switch_channel_cooldown.stop()
	
func _physics_process(_delta: float):
	if enemy.health <= 0:
		transitioned.emit(self, \"death\")
	if enemy.base_bools.is_seen and not word_added:
		if enemy.words_added_per_state[\"description\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"height\", \"Medium height\")
			enemy.words_added_per_state[\"description\"] = true
		if enemy.words_added_per_state[\"prowl\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_2\", \"screams very loud\")
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_2\", \"approaches windows\")
			enemy.words_added_per_state[\"prowl\"] = true
		word_added = true
	
func on_prowl_timer_timeout():
	print(\"TvG transitioning\")
	if ready_to_attack:
		transitioned.emit(self, \"breakin\")
	else:
		transitioned.emit(self, \"leave\")

func on_switch_channel_cooldown_timeout():
	var available_channels: Array = [1,2,3,4]
	
	if available_channels.size() <= 0:
		enemy.channel_number = available_channels.pick_random()
		var index = enemy.channel_number

		match index:
			1: 
				enemy.tv.channels[\"Channel 1\"] = \"Corrupted\"
				available_channels.erase(1)
			2: 
				enemy.tv.channels[\"Channel 2\"] = \"Corrupted\"
				available_channels.erase(2)
			3: 
				enemy.tv.channels[\"Channel 3\"] = \"Corrupted\"
				available_channels.erase(3)
			4: 
				enemy.tv.channels[\"Channel 4\"] = \"Corrupted\"
				available_channels.erase(4)
				
		switch_channel_cooldown.start()
		
	else:
		ready_to_attack = true
"

[sub_resource type="GDScript" id="GDScript_2vfje"]
script/source = "extends Enemy_state_breakin

func enter():
	print(enemy, \": Breaking in\")
	var wait_time = get_tree().create_timer(3)
	wait_time.connect(\"timeout\", Callable(self, \"on_wait_timeout\"))
	enemy.show()
	
func exit():
	enemy.set_can_see(true)
	enemy.set_visibility(true)
	enemy.base_bools.can_play_move_animation = true
	
func break_in():
	enemy.position = enemy.tv.global_position
	transitioned.emit(self, \"wander\")
	print(\"beans\")

func on_wait_timeout():
	break_in()
"

[sub_resource type="GDScript" id="GDScript_7m885"]
script/source = "extends Enemy_state_wander
var word_added: bool = false

func enter():
	print(enemy, \": Wandering\")
	var wander_timer = get_tree().create_timer(30)
	wander_timer.connect(\"timeout\", Callable(self, \"on_wander_timer_timeout\"))
	enemy.set_movement_speed(wander_speed)
	enemy.teleport()
	get_direction()
	
	move_cooldown.connect(\"timeout\", Callable(self, \"on_move_cooldown_timeout\"))
	
func exit():
	move_cooldown.disconnect(\"timeout\", Callable(self, \"on_move_cooldown_timeout\"))
	move_cooldown.stop()

func physics_Update(_delta: float):
	if enemy.health <= 0:
		transitioned.emit(self, \"death\")
	if enemy.base_bools.is_seen and not word_added:
		if enemy.words_added_per_state[\"description\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"height\", \"Medium height\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"gender\", \"Girl\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"clothing\", \"in an old white dress\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"features\", \"Long Black Hair\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"other\", \"Pale Skin\")
			enemy.words_added_per_state[\"description\"] = true
		if enemy.words_added_per_state[\"wander\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_1\", \"Wanders around outside the cabin\")
			enemy.words_added_per_state[\"wander\"] = true
		word_added = true

func on_wander_timer_timeout():
	transitioned.emit(self, \"search\")
	
func on_move_cooldown_timeout():
	get_direction()
	enemy.teleport()
"

[sub_resource type="GDScript" id="GDScript_rvdx2"]
script/source = "extends Enemy_state_search

func enter():
	print(\"enem searching\")
	search_timer.start()
	if not search_timer.is_connected(\"timeout\", Callable(self, \"on_search_timer_timeout\")):
		search_timer.connect(\"timeout\", Callable(self, \"on_search_timer_timeout\"))

func exit():
	pass

func search():
	if not enemy.navagent.is_target_reached():
		enemy.teleport()

func on_search_timer_timeout():
	var search_chance = randf_range(enemy.sense * 10, 100)
	if search_chance <= 20:
		return
	else:
		search()
		EnemyDirector.direct_enemy(enemy, search_chance)
"

[sub_resource type="GDScript" id="GDScript_i1iax"]
script/source = "extends Enemy_state_chase

var word_added: bool = false

func enter():
	print(enemy, \": pursuing\")
	move_cooldown.connect(\"timeout\", Callable(self, \"on_move_timer_timeout\"))
	enemy.base_bools.is_pursuing = true
	enemy.set_movement_speed(pursue_speed)
	move_cooldown.start()

func exit():
	move_cooldown.disconnect(\"timeout\", Callable(self, \"on_move_timer_timeout\"))
	enemy.base_bools.is_pursuing = false
	enemy.set_movement_speed(50)
	move_cooldown.stop()
	
func physics_Update(_delta: float):
	if not enemy.navagent.is_target_reached():
		enemy.teleport()
		
	if enemy.health < 0:
		transitioned.emit(self, \"death\")
	if enemy.base_bools.is_seen and not word_added:
		if enemy.words_added_per_state[\"description\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"height\", \"Medium height\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"gender\", \"Girl\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"clothing\", \"in an old white dress\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"features\", \"Long Black Hair\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"other\", \"Pale Skin\")
			enemy.words_added_per_state[\"description\"] = true
		if enemy.words_added_per_state[\"chase\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_3\", \"breaks through windows\")
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_3\", \"chases the player\")
			enemy.words_added_per_state[\"chase\"] = true
		word_added = true
		
func find_target():
	if enemy.base_bools.is_pursuing:
		enemy.set_target_position(player.position)
		enemy.base_bools.can_move = true
		move_cooldown.start()

func on_move_cooldown_timeout():
	find_target()
	enemy.teleport()
"

[sub_resource type="GDScript" id="GDScript_5pja7"]
script/source = "extends Enemy_state_leave
var word_added: bool = false

func enter():
	print(enemy, \": leaving\")
	enemy.current_speed = 0
	leave()

func exit():
	pass
	
func physics_Update(_delta: float):
	if enemy.health <= 0:
		transitioned.emit(self, \"death\")
	if enemy.is_seen and not word_added:
		if enemy.words_added_per_state[\"description\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"height\", \"Medium height\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"gender\", \"Girl\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"clothing\", \"in an old white dress\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"features\", \"Long Black Hair\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"other\", \"Pale Skin\")
			enemy.words_added_per_state[\"description\"] = true
		if enemy.words_added_per_state[\"description\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_4\", \"Leaves when you close the window\")
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_4\", \"Leaves after some time\")
			enemy.words_added_per_state[\"leave\"] = true
		word_added = true

func leave():
	enemy.queue_free()
"

[sub_resource type="GDScript" id="GDScript_isr6h"]
script/source = "extends Enemy_state_death
var word_added: bool = false

func enter():
	print(enemy, \": dead\")
	enemy.is_alive = false
	enemy.can_play_move_animation = false
	enemy.anim_tree.get(\"parameters/playback\").travel(\"Death\")
	BackgroundAudio.stop_background_theme(2)
	await enemy.anim_tree.animation_finished
	death()

func exit():
	pass

func physics_Update(_delta: float):
	if enemy.is_seen and not word_added:
		if enemy.words_added_per_state[\"description\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"height\", \"Medium height\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"gender\", \"Girl\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"clothing\", \"in an old white dress\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"features\", \"Long Black Hair\")
			enemy.journal.new_word(\"HUMANOID\", \"Descriptions\", \"other\", \"Pale Skin\")
			enemy.words_added_per_state[\"description\"] = true
		if enemy.words_added_per_state[\"description\"] == false:
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_4\", \"Leaves when you close the window\")
			enemy.journal.new_word(\"HUMANOID\", \"Behaviors\", \"state_4\", \"Leaves after some time\")
			enemy.words_added_per_state[\"leave\"] = true
		word_added = true

func death():
	enemy.queue_free()
"

[sub_resource type="Animation" id="Animation_pocde"]
resource_name = "Idle"
length = 1.7
step = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../AnimatedSprite2D:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Idle1"]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("../AnimatedSprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("..:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="Animation" id="Animation_hkp1y"]
resource_name = "Idle2"
length = 1.7
step = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../AnimatedSprite2D:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Idle2"]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("../AnimatedSprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("..:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="Animation" id="Animation_6dlxt"]
resource_name = "Idle3"
length = 1.7
step = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../AnimatedSprite2D:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Idle2"]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("../AnimatedSprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("..:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="Animation" id="Animation_q0212"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../AnimatedSprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("..:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="Animation" id="Animation_gm2cm"]
resource_name = "Reappear"
length = 0.6
step = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../AnimatedSprite2D:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Teleport"]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("../AnimatedSprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [6, 5, 4, 3, 2, 1, 0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("..:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="Animation" id="Animation_bo0a4"]
resource_name = "teleport"
length = 0.6
step = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../AnimatedSprite2D:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Teleport"]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("../AnimatedSprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("..:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.6),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_agpkr"]
_data = {
&"Idle1": SubResource("Animation_pocde"),
&"Idle2": SubResource("Animation_hkp1y"),
&"Idle3": SubResource("Animation_6dlxt"),
&"RESET": SubResource("Animation_q0212"),
&"Reappear": SubResource("Animation_gm2cm"),
&"Teleport": SubResource("Animation_bo0a4")
}

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_4qscr"]
animation = &"Idle1"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_g3ymo"]
animation = &"Idle2"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_yfkvk"]
animation = &"Idle3"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_fbdia"]
animation = &"Reappear"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_8wnix"]
animation = &"Teleport"

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_m2yki"]

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_pocgs"]

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_p0w4s"]
break_loop_at_end = true
switch_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_0qqyi"]
break_loop_at_end = true
switch_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_bowvo"]
break_loop_at_end = true
switch_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_h1qcr"]
break_loop_at_end = true
priority = 2
switch_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_scvoj"]
break_loop_at_end = true

[sub_resource type="AnimationNodeStateMachine" id="AnimationNodeStateMachine_sxiid"]
states/Idle1/node = SubResource("AnimationNodeAnimation_4qscr")
states/Idle1/position = Vector2(297.722, 100)
states/Idle2/node = SubResource("AnimationNodeAnimation_g3ymo")
states/Idle2/position = Vector2(373.722, 174.037)
states/Idle3/node = SubResource("AnimationNodeAnimation_yfkvk")
states/Idle3/position = Vector2(373.722, 27.0369)
states/Reappear/node = SubResource("AnimationNodeAnimation_fbdia")
states/Reappear/position = Vector2(516, 174.037)
states/Teleport/node = SubResource("AnimationNodeAnimation_8wnix")
states/Teleport/position = Vector2(516, 27.0369)
transitions = ["Teleport", "Reappear", SubResource("AnimationNodeStateMachineTransition_m2yki"), "Start", "Idle1", SubResource("AnimationNodeStateMachineTransition_pocgs"), "Idle1", "Idle3", SubResource("AnimationNodeStateMachineTransition_p0w4s"), "Idle3", "Idle2", SubResource("AnimationNodeStateMachineTransition_0qqyi"), "Idle2", "Idle1", SubResource("AnimationNodeStateMachineTransition_bowvo"), "Idle1", "Teleport", SubResource("AnimationNodeStateMachineTransition_h1qcr"), "Reappear", "Idle1", SubResource("AnimationNodeStateMachineTransition_scvoj")]
graph_offset = Vector2(-190.997, -14.9419)

[node name="Enemy_ElectronicGuy" type="CharacterBody2D" node_paths=PackedStringArray("navagent", "hit_box", "vision_cone", "rotate_vc_timer", "check_vision_timer", "anim_sprite", "anim_tree", "state_machine") groups=["Enemy"]]
visible = false
z_index = 1
y_sort_enabled = true
scale = Vector2(0.06, 0.06)
collision_layer = 4
collision_mask = 4
script = SubResource("GDScript_kvlcq")
health = 1000
attack_damage = 100
sense = 5
intelligence = 4
navagent = NodePath("NavigationAgent2D")
hit_box = NodePath("KillZone")
vision_cone = NodePath("Vision")
rotate_vc_timer = NodePath("Timers/RotateVisionCone")
check_vision_timer = NodePath("Timers/CheckVision")
anim_sprite = NodePath("AnimatedSprite2D")
anim_tree = NodePath("AnimationTree")
spawn_location = "TV"
state_machine = NodePath("Statemachine")
targets = {
"doors": false,
"hiding_spots": true,
"windows": false
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2(1.52588e-05, -1.81899e-12)
shape = SubResource("CapsuleShape2D_ygt66")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
y_sort_enabled = true
position = Vector2(0, -533.333)
scale = Vector2(16, 16)
sprite_frames = SubResource("SpriteFrames_rrhvi")
animation = &""

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
debug_enabled = true

[node name="KillZone" type="Area2D" parent="."]
position = Vector2(0, -1.52588e-05)
collision_layer = 4
collision_mask = 2
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="KillZone"]
position = Vector2(0, 1.52588e-05)
shape = SubResource("CapsuleShape2D_gv56p")

[node name="Audio" type="Node2D" parent="."]

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="Audio"]
stream = ExtResource("2_3i6hs")

[node name="Vision" type="PointLight2D" parent="."]
scale = Vector2(32, 32)
color = Color(0.832644, 0.290377, 0.290377, 1)
texture = ExtResource("4_ydiuq")

[node name="RayCast2D2" type="RayCast2D" parent="Vision"]
self_modulate = Color(0.531996, 0.650591, 0.936568, 1)
scale = Vector2(0.625, 0.625)
target_position = Vector2(100, 40)
collision_mask = 3

[node name="RayCast2D3" type="RayCast2D" parent="Vision"]
self_modulate = Color(0.531996, 0.650591, 0.936568, 1)
scale = Vector2(0.625, 0.625)
target_position = Vector2(100, 20)
collision_mask = 3

[node name="RayCast2D4" type="RayCast2D" parent="Vision"]
self_modulate = Color(0.531996, 0.650591, 0.936568, 1)
scale = Vector2(0.625, 0.625)
target_position = Vector2(100, 0)
collision_mask = 3

[node name="RayCast2D5" type="RayCast2D" parent="Vision"]
self_modulate = Color(0.531996, 0.650591, 0.936568, 1)
scale = Vector2(0.625, 0.625)
target_position = Vector2(100, -20)
collision_mask = 3

[node name="RayCast2D6" type="RayCast2D" parent="Vision"]
self_modulate = Color(0.531996, 0.650591, 0.936568, 1)
scale = Vector2(0.625, 0.625)
target_position = Vector2(100, -40)
collision_mask = 3

[node name="Timers" type="Node" parent="."]

[node name="RotateVisionCone" type="Timer" parent="Timers"]
one_shot = true

[node name="SearchTimer" type="Timer" parent="Timers"]
wait_time = 10.0

[node name="SwitchChannelCooldown" type="Timer" parent="Timers"]
wait_time = 2.0
one_shot = true

[node name="MoveCooldown" type="Timer" parent="Timers"]
wait_time = 3.0
one_shot = true

[node name="CheckVision" type="Timer" parent="Timers"]

[node name="Statemachine" type="Node" parent="." node_paths=PackedStringArray("initial_state")]
script = ExtResource("3_vcco8")
initial_state = NodePath("Spawn")

[node name="Spawn" type="Node" parent="Statemachine" node_paths=PackedStringArray("enemy", "spawn_sound")]
script = SubResource("GDScript_ajdjm")
enemy = NodePath("../..")
spawn_sound = NodePath("../../Audio/AudioStreamPlayer2D")

[node name="Prowl" type="Node" parent="Statemachine" node_paths=PackedStringArray("switch_channel_cooldown", "enemy")]
script = SubResource("GDScript_cm636")
switch_channel_cooldown = NodePath("../../Timers/SwitchChannelCooldown")
enemy = NodePath("../..")

[node name="BreakIn" type="Node" parent="Statemachine" node_paths=PackedStringArray("enemy")]
script = SubResource("GDScript_2vfje")
enemy = NodePath("../..")

[node name="Wander" type="Node" parent="Statemachine" node_paths=PackedStringArray("enemy", "move_cooldown")]
script = SubResource("GDScript_7m885")
enemy = NodePath("../..")
move_cooldown = NodePath("../../Timers/MoveCooldown")
wander_speed = 200
wander_radius = 25

[node name="Search" type="Node" parent="Statemachine" node_paths=PackedStringArray("enemy", "search_timer")]
script = SubResource("GDScript_rvdx2")
enemy = NodePath("../..")
search_timer = NodePath("../../Timers/SearchTimer")

[node name="Chase" type="Node" parent="Statemachine" node_paths=PackedStringArray("enemy", "move_cooldown")]
script = SubResource("GDScript_i1iax")
enemy = NodePath("../..")
move_cooldown = NodePath("../../Timers/MoveCooldown")
pursue_speed = 50

[node name="Leave" type="Node" parent="Statemachine" node_paths=PackedStringArray("enemy")]
script = SubResource("GDScript_5pja7")
enemy = NodePath("../..")

[node name="Death" type="Node" parent="Statemachine" node_paths=PackedStringArray("enemy")]
script = SubResource("GDScript_isr6h")
enemy = NodePath("../..")

[node name="visionsprite" type="Sprite2D" parent="."]
visible = false
scale = Vector2(32, 32)
texture = ExtResource("4_ydiuq")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("../AnimationTree")
libraries = {
"": SubResource("AnimationLibrary_agpkr")
}

[node name="AnimationTree" type="AnimationTree" parent="."]
root_node = NodePath(".")
tree_root = SubResource("AnimationNodeStateMachine_sxiid")
anim_player = NodePath("../AnimationPlayer")

[connection signal="body_entered" from="KillZone" to="." method="on_body_entered"]
